// Generated by [optioner] command-line tool; DO NOT EDIT
// If you have any questions, please create issues and submit contributions at:
// https://github.com/chenmingyong0423/go-optioner

package sitemap

import (
	"encoding/xml"
	"os"
)

type UrlSet struct {
	XMLName xml.Name `xml:"urlset"`
	Xmlns   string   `xml:"xmlns,attr"`
	Urls    []URL    `xml:"url"`
}

func (urlSet *UrlSet) GenerateXml(output string) error {
	// 创建文件
	file, err := os.Create(output)
	if err != nil {
		return err
	}
	defer file.Close()

	// 写入文件
	encoder := xml.NewEncoder(file)
	encoder.Indent("", "  ")
	if err = encoder.Encode(urlSet); err != nil {
		return err
	}
	return nil
}

//go:generate optioner -type URL -output url_set.go -mode append
type URL struct {
	Loc        string  `xml:"loc" opt:"-"`
	LastMod    string  `xml:"lastmod,omitempty"`
	ChangeFreq string  `xml:"changefreq,omitempty"`
	Priority   float64 `xml:"priority,omitempty"`
}

type URLOption func(*URL)

func NewURL(loc string, opts ...URLOption) *URL {
	uRL := &URL{
		Loc: loc,
	}

	for _, opt := range opts {
		opt(uRL)
	}

	return uRL
}

func WithLastMod(lastMod string) URLOption {
	return func(uRL *URL) {
		uRL.LastMod = lastMod
	}
}

func WithChangeFreq(changeFreq string) URLOption {
	return func(uRL *URL) {
		uRL.ChangeFreq = changeFreq
	}
}

func WithPriority(priority float64) URLOption {
	return func(uRL *URL) {
		uRL.Priority = priority
	}
}
